total_response <- link_func(total_response)
total_response
devtools::load_all(".")
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
pred <- predict_func(par, predictors)
pred
# Calculate the loss
loss <- loss_func(
obs = outcome,
pred = pred,
weights = weights,
na.rm = na.rm
)
loss
devtools::load_all(".")
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "banister",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model$method
banister_model$performance
unlist(banister_model$coefs)
banister_model$control
# Get model predictions
bike_score$pred <- predict(banister_model, bike_score)$.pred
# Plot
doseBike <- ggplot(bike_score, aes(x = Day, y = BikeScore)) +
theme_cowplot(10) +
geom_bar(stat = "identity") +
xlab(NULL)
response <- ggplot(bike_score, aes(x = Day, y = pred)) +
theme_cowplot(10) +
geom_line(color = "black", alpha = 0.5) +
geom_point(aes(y = Test_5min_Power), color = "red", alpha = 0.5) +
ylab("est1RM")
cowplot::plot_grid( doseBike, response, ncol = 1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
meanDiff <- mean(pred - obs, na.rm = na.rm)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
obs
na.rm
pred
devtools::load_all(".")
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
#optim_method = "DE"
#coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
#coefs_lower = c(200, 0, 0, 0, 0),
#coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE
optim_method = "DE"
coefs_start = c(50, 1, 14, 3, 7, 0, 0, 0, 0),
coefs_lower = c(200, 0, 0, 0, 0),
coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0, 0, 0, 0, 0),
coefs_upper = c(300, 10, 140, 30, 70)
)
)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0, 0, 0, 0, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
x^2
1^0
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
pred <- predict_func(par, predictors)
pred
par
x^2
1^0.9
1^0.91
2^0.91
devtools::load_all(".")
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
model$coefs
# Get and remove intercept
intercept <- coefs[[1]]
coefs[[1]] <- NULL
coefs <- model$coefs
# Get and remove intercept
intercept <- coefs[[1]]
coefs[[1]] <- NULL
predictors <- as.list(predictors)
# Function to go over predictors and coefs
training_responses <- purrr::map2(
coefs,
predictors,
.f = function(.x, .y) {
# Function to calculate rolling training effects
effect_func <- function(prev, current, tau, alpha) {
(-1/tau * prev^alpha) + current
}
PTE <- .x$PTE_gain * purrr::accumulate(.y, effect_func, tau = .x$PTE_tau, alpha = .x$PTE_alpha)
NTE <- .x$NTE_gain * purrr::accumulate(.y, effect_func, tau = .x$NTE_tau, alpha = .x$NTE_alpha)
return(PTE - NTE)
}
)
training_responses
devtools::load_all(".")
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
# Function to calculate rolling training effects
effect_func <- function(prev, current, tau, alpha) {
(-1/tau * prev^alpha) + current
}
purrr::accumulate(.y, effect_func, tau = .x$PTE_tau, alpha = .x$PTE_alpha)
.x
.y
177.37^0.6519707
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
pre
prev
current
(-1/tau * (prev^alpha)) + current
prev <- -124.1218
(-1/tau * (prev^alpha)) + current
-145^0.5
alpha
prev
prev ^alpha
prev^2
prev^2.5
-12.04159^2
-12.04159^2.5
-12.04159^1.1
-12.04159^0.8
prev
prev^2.5
sign
sign(1)
sign(-1)
sign(-5345345)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
prev
prev^alpha
alpha
(-1/tau * sign(abs)*(abs(prev)^alpha)) + current
abs(prev)^alpha)
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
is.na(NaN)
devtools::load_all(".")
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
loss
pre
pred
seed
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
par
# Get the model predictions
pred <- predict_func(par, predictors)
pred
devtools::load_all(".")
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
prev
current
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
devtools::load_all(".")
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
training_responses <- purrr::map2(
coefs,
predictors,
.f = function(.x, .y) {
# Function to calculate rolling training effects
effect_func <- function(prev, current, tau, alpha) {
(-1/tau * sign(prev)*(abs(prev)^alpha)) + current
}
PTE <- .x$PTE_gain * purrr::accumulate(.y, effect_func, tau = .x$PTE_tau, alpha = .x$PTE_alpha)
NTE <- .x$NTE_gain * purrr::accumulate(.y, effect_func, tau = .x$NTE_tau, alpha = .x$NTE_alpha)
return(PTE - NTE)
}
)
training_responses
purrr::pmap_dbl(training_responses, sum)
intercept
intercept + purrr::pmap_dbl(training_responses, sum)
devtools::load_all(".")
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
pred
# Calculate the loss
loss <- loss_func(
obs = outcome,
pred = pred,
weights = weights,
na.rm = na.rm
)
devtools::load_all(".")
data("bike_score")
#bike_score$BikeScore <- sample(bike_score$BikeScore)
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "turner",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
#bike_score$BikeScore <- sample(bike_score$BikeScore)
set.seed(1)
banister_model <- dorem(
Test_5min_Power ~ BikeScore,
bike_score,
method = "banister",
control = dorem_control(
optim_trace =  TRUE,
optim_method = "DE",
coefs_start = c(50, 1, 14, 1, 3, 7, 1),
coefs_lower = c(200, 0, 0.01, 0, 0, 0.1, 0),
coefs_upper = c(300, 10, 140, 2, 30, 70, 2)
)
)
